package ${PACKAGE_NAME}

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.activity.compose.setContent
import androidx.compose.material3.Card
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.ui.unit.dp
import androidx.compose.ui.tooling.preview.Preview

class BottomNavigationActivity : AppCompatActivity() {
    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            Column() {
                Text("This is a simple bottom navigation bar that always shows label")
                Card(shape = RoundedCornerShape(4.dp), modifier = Modifier.padding(8.dp)) {
                    BottomNavigationAlwaysShowLabelComponent()
                }
                Text(
                    "This is a bottom navigation bar that only shows label for " +
                            "selected item"
                )
                Card(shape = RoundedCornerShape(4.dp), modifier = Modifier.padding(8.dp)) {
                    BottomNavigationOnlySelectedLabelComponent()
                }
            }
        }
    }
}

val listItems = listOf("Games", "Apps", "Movies", "Books")

@Composable
fun BottomNavigationAlwaysShowLabelComponent() {
    var selectedIndex by remember { mutableStateOf(0) }
    BottomNavigation(modifier = Modifier.padding(16.dp)) {
        listItems.forEachIndexed { index, label ->
            BottomNavigationItem(
                icon = {
                    Icon(imageVector = Icons.Filled.Favorite, contentDescription = "Favorite")
                },
                label = {
                    Text(text = label)
                },
                selected = selectedIndex == index,
                onClick = { selectedIndex = index }
            )
        }
    }
}


@Composable
fun BottomNavigationOnlySelectedLabelComponent() {
    var selectedIndex by remember { mutableStateOf(0) }
    BottomNavigationItem(modifier = Modifier.padding(16.dp)) {
        listItems.forEachIndexed { index, label ->
            BottomNavigationItem(
                icon = {
                    Icon(imageVector = Icons.Filled.Favorite, contentDescription = "Favorite")
                },
                label = {
                    Text(text = label)
                },
                selected = selectedIndex == index,
                onClick = { selectedIndex = index },
                alwaysShowLabel = false
            )
        }
    }
}

@Preview
@Composable
fun BottomNavigationAlwaysShowLabelComponentPreview() {
    BottomNavigationAlwaysShowLabelComponent()
}

@Preview
@Composable
fun BottomNavigationOnlySelectedLabelComponentPreview() {
    BottomNavigationOnlySelectedLabelComponent()
}